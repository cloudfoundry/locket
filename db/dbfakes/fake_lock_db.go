// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/lager/v3"
	"code.cloudfoundry.org/locket/db"
	"code.cloudfoundry.org/locket/models"
)

type FakeLockDB struct {
	CountStub        func(context.Context, lager.Logger, string) (int, error)
	countMutex       sync.RWMutex
	countArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
	}
	countReturns struct {
		result1 int
		result2 error
	}
	countReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	FetchStub        func(context.Context, lager.Logger, string) (*db.Lock, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
	}
	fetchReturns struct {
		result1 *db.Lock
		result2 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 *db.Lock
		result2 error
	}
	FetchAllStub        func(context.Context, lager.Logger, string) ([]*db.Lock, error)
	fetchAllMutex       sync.RWMutex
	fetchAllArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
	}
	fetchAllReturns struct {
		result1 []*db.Lock
		result2 error
	}
	fetchAllReturnsOnCall map[int]struct {
		result1 []*db.Lock
		result2 error
	}
	FetchAndReleaseStub        func(context.Context, lager.Logger, *db.Lock) (bool, error)
	fetchAndReleaseMutex       sync.RWMutex
	fetchAndReleaseArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 *db.Lock
	}
	fetchAndReleaseReturns struct {
		result1 bool
		result2 error
	}
	fetchAndReleaseReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	LockStub        func(context.Context, lager.Logger, *models.Resource, int64) (*db.Lock, error)
	lockMutex       sync.RWMutex
	lockArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 *models.Resource
		arg4 int64
	}
	lockReturns struct {
		result1 *db.Lock
		result2 error
	}
	lockReturnsOnCall map[int]struct {
		result1 *db.Lock
		result2 error
	}
	ReleaseStub        func(context.Context, lager.Logger, *models.Resource) error
	releaseMutex       sync.RWMutex
	releaseArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 *models.Resource
	}
	releaseReturns struct {
		result1 error
	}
	releaseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLockDB) Count(arg1 context.Context, arg2 lager.Logger, arg3 string) (int, error) {
	fake.countMutex.Lock()
	ret, specificReturn := fake.countReturnsOnCall[len(fake.countArgsForCall)]
	fake.countArgsForCall = append(fake.countArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CountStub
	fakeReturns := fake.countReturns
	fake.recordInvocation("Count", []interface{}{arg1, arg2, arg3})
	fake.countMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLockDB) CountCallCount() int {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	return len(fake.countArgsForCall)
}

func (fake *FakeLockDB) CountCalls(stub func(context.Context, lager.Logger, string) (int, error)) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = stub
}

func (fake *FakeLockDB) CountArgsForCall(i int) (context.Context, lager.Logger, string) {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	argsForCall := fake.countArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLockDB) CountReturns(result1 int, result2 error) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = nil
	fake.countReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) CountReturnsOnCall(i int, result1 int, result2 error) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = nil
	if fake.countReturnsOnCall == nil {
		fake.countReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.countReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) Fetch(arg1 context.Context, arg2 lager.Logger, arg3 string) (*db.Lock, error) {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FetchStub
	fakeReturns := fake.fetchReturns
	fake.recordInvocation("Fetch", []interface{}{arg1, arg2, arg3})
	fake.fetchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLockDB) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeLockDB) FetchCalls(stub func(context.Context, lager.Logger, string) (*db.Lock, error)) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = stub
}

func (fake *FakeLockDB) FetchArgsForCall(i int) (context.Context, lager.Logger, string) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	argsForCall := fake.fetchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLockDB) FetchReturns(result1 *db.Lock, result2 error) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 *db.Lock
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) FetchReturnsOnCall(i int, result1 *db.Lock, result2 error) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 *db.Lock
			result2 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 *db.Lock
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) FetchAll(arg1 context.Context, arg2 lager.Logger, arg3 string) ([]*db.Lock, error) {
	fake.fetchAllMutex.Lock()
	ret, specificReturn := fake.fetchAllReturnsOnCall[len(fake.fetchAllArgsForCall)]
	fake.fetchAllArgsForCall = append(fake.fetchAllArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FetchAllStub
	fakeReturns := fake.fetchAllReturns
	fake.recordInvocation("FetchAll", []interface{}{arg1, arg2, arg3})
	fake.fetchAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLockDB) FetchAllCallCount() int {
	fake.fetchAllMutex.RLock()
	defer fake.fetchAllMutex.RUnlock()
	return len(fake.fetchAllArgsForCall)
}

func (fake *FakeLockDB) FetchAllCalls(stub func(context.Context, lager.Logger, string) ([]*db.Lock, error)) {
	fake.fetchAllMutex.Lock()
	defer fake.fetchAllMutex.Unlock()
	fake.FetchAllStub = stub
}

func (fake *FakeLockDB) FetchAllArgsForCall(i int) (context.Context, lager.Logger, string) {
	fake.fetchAllMutex.RLock()
	defer fake.fetchAllMutex.RUnlock()
	argsForCall := fake.fetchAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLockDB) FetchAllReturns(result1 []*db.Lock, result2 error) {
	fake.fetchAllMutex.Lock()
	defer fake.fetchAllMutex.Unlock()
	fake.FetchAllStub = nil
	fake.fetchAllReturns = struct {
		result1 []*db.Lock
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) FetchAllReturnsOnCall(i int, result1 []*db.Lock, result2 error) {
	fake.fetchAllMutex.Lock()
	defer fake.fetchAllMutex.Unlock()
	fake.FetchAllStub = nil
	if fake.fetchAllReturnsOnCall == nil {
		fake.fetchAllReturnsOnCall = make(map[int]struct {
			result1 []*db.Lock
			result2 error
		})
	}
	fake.fetchAllReturnsOnCall[i] = struct {
		result1 []*db.Lock
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) FetchAndRelease(arg1 context.Context, arg2 lager.Logger, arg3 *db.Lock) (bool, error) {
	fake.fetchAndReleaseMutex.Lock()
	ret, specificReturn := fake.fetchAndReleaseReturnsOnCall[len(fake.fetchAndReleaseArgsForCall)]
	fake.fetchAndReleaseArgsForCall = append(fake.fetchAndReleaseArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 *db.Lock
	}{arg1, arg2, arg3})
	stub := fake.FetchAndReleaseStub
	fakeReturns := fake.fetchAndReleaseReturns
	fake.recordInvocation("FetchAndRelease", []interface{}{arg1, arg2, arg3})
	fake.fetchAndReleaseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLockDB) FetchAndReleaseCallCount() int {
	fake.fetchAndReleaseMutex.RLock()
	defer fake.fetchAndReleaseMutex.RUnlock()
	return len(fake.fetchAndReleaseArgsForCall)
}

func (fake *FakeLockDB) FetchAndReleaseCalls(stub func(context.Context, lager.Logger, *db.Lock) (bool, error)) {
	fake.fetchAndReleaseMutex.Lock()
	defer fake.fetchAndReleaseMutex.Unlock()
	fake.FetchAndReleaseStub = stub
}

func (fake *FakeLockDB) FetchAndReleaseArgsForCall(i int) (context.Context, lager.Logger, *db.Lock) {
	fake.fetchAndReleaseMutex.RLock()
	defer fake.fetchAndReleaseMutex.RUnlock()
	argsForCall := fake.fetchAndReleaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLockDB) FetchAndReleaseReturns(result1 bool, result2 error) {
	fake.fetchAndReleaseMutex.Lock()
	defer fake.fetchAndReleaseMutex.Unlock()
	fake.FetchAndReleaseStub = nil
	fake.fetchAndReleaseReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) FetchAndReleaseReturnsOnCall(i int, result1 bool, result2 error) {
	fake.fetchAndReleaseMutex.Lock()
	defer fake.fetchAndReleaseMutex.Unlock()
	fake.FetchAndReleaseStub = nil
	if fake.fetchAndReleaseReturnsOnCall == nil {
		fake.fetchAndReleaseReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.fetchAndReleaseReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) Lock(arg1 context.Context, arg2 lager.Logger, arg3 *models.Resource, arg4 int64) (*db.Lock, error) {
	fake.lockMutex.Lock()
	ret, specificReturn := fake.lockReturnsOnCall[len(fake.lockArgsForCall)]
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 *models.Resource
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.LockStub
	fakeReturns := fake.lockReturns
	fake.recordInvocation("Lock", []interface{}{arg1, arg2, arg3, arg4})
	fake.lockMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLockDB) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *FakeLockDB) LockCalls(stub func(context.Context, lager.Logger, *models.Resource, int64) (*db.Lock, error)) {
	fake.lockMutex.Lock()
	defer fake.lockMutex.Unlock()
	fake.LockStub = stub
}

func (fake *FakeLockDB) LockArgsForCall(i int) (context.Context, lager.Logger, *models.Resource, int64) {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	argsForCall := fake.lockArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeLockDB) LockReturns(result1 *db.Lock, result2 error) {
	fake.lockMutex.Lock()
	defer fake.lockMutex.Unlock()
	fake.LockStub = nil
	fake.lockReturns = struct {
		result1 *db.Lock
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) LockReturnsOnCall(i int, result1 *db.Lock, result2 error) {
	fake.lockMutex.Lock()
	defer fake.lockMutex.Unlock()
	fake.LockStub = nil
	if fake.lockReturnsOnCall == nil {
		fake.lockReturnsOnCall = make(map[int]struct {
			result1 *db.Lock
			result2 error
		})
	}
	fake.lockReturnsOnCall[i] = struct {
		result1 *db.Lock
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) Release(arg1 context.Context, arg2 lager.Logger, arg3 *models.Resource) error {
	fake.releaseMutex.Lock()
	ret, specificReturn := fake.releaseReturnsOnCall[len(fake.releaseArgsForCall)]
	fake.releaseArgsForCall = append(fake.releaseArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 *models.Resource
	}{arg1, arg2, arg3})
	stub := fake.ReleaseStub
	fakeReturns := fake.releaseReturns
	fake.recordInvocation("Release", []interface{}{arg1, arg2, arg3})
	fake.releaseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLockDB) ReleaseCallCount() int {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return len(fake.releaseArgsForCall)
}

func (fake *FakeLockDB) ReleaseCalls(stub func(context.Context, lager.Logger, *models.Resource) error) {
	fake.releaseMutex.Lock()
	defer fake.releaseMutex.Unlock()
	fake.ReleaseStub = stub
}

func (fake *FakeLockDB) ReleaseArgsForCall(i int) (context.Context, lager.Logger, *models.Resource) {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	argsForCall := fake.releaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLockDB) ReleaseReturns(result1 error) {
	fake.releaseMutex.Lock()
	defer fake.releaseMutex.Unlock()
	fake.ReleaseStub = nil
	fake.releaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLockDB) ReleaseReturnsOnCall(i int, result1 error) {
	fake.releaseMutex.Lock()
	defer fake.releaseMutex.Unlock()
	fake.ReleaseStub = nil
	if fake.releaseReturnsOnCall == nil {
		fake.releaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.releaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLockDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	fake.fetchAllMutex.RLock()
	defer fake.fetchAllMutex.RUnlock()
	fake.fetchAndReleaseMutex.RLock()
	defer fake.fetchAndReleaseMutex.RUnlock()
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLockDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.LockDB = new(FakeLockDB)
