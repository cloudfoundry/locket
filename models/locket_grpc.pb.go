// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: locket.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProtoLocket_ProtoLock_FullMethodName     = "/models.ProtoLocket/ProtoLock"
	ProtoLocket_ProtoFetch_FullMethodName    = "/models.ProtoLocket/ProtoFetch"
	ProtoLocket_ProtoRelease_FullMethodName  = "/models.ProtoLocket/ProtoRelease"
	ProtoLocket_ProtoFetchAll_FullMethodName = "/models.ProtoLocket/ProtoFetchAll"
)

// ProtoLocketClient is the client API for ProtoLocket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoLocketClient interface {
	ProtoLock(ctx context.Context, in *ProtoLockRequest, opts ...grpc.CallOption) (*ProtoLockResponse, error)
	ProtoFetch(ctx context.Context, in *ProtoFetchRequest, opts ...grpc.CallOption) (*ProtoFetchResponse, error)
	ProtoRelease(ctx context.Context, in *ProtoReleaseRequest, opts ...grpc.CallOption) (*ProtoReleaseResponse, error)
	ProtoFetchAll(ctx context.Context, in *ProtoFetchAllRequest, opts ...grpc.CallOption) (*ProtoFetchAllResponse, error)
}

type protoLocketClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoLocketClient(cc grpc.ClientConnInterface) ProtoLocketClient {
	return &protoLocketClient{cc}
}

func (c *protoLocketClient) ProtoLock(ctx context.Context, in *ProtoLockRequest, opts ...grpc.CallOption) (*ProtoLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProtoLockResponse)
	err := c.cc.Invoke(ctx, ProtoLocket_ProtoLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoLocketClient) ProtoFetch(ctx context.Context, in *ProtoFetchRequest, opts ...grpc.CallOption) (*ProtoFetchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProtoFetchResponse)
	err := c.cc.Invoke(ctx, ProtoLocket_ProtoFetch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoLocketClient) ProtoRelease(ctx context.Context, in *ProtoReleaseRequest, opts ...grpc.CallOption) (*ProtoReleaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProtoReleaseResponse)
	err := c.cc.Invoke(ctx, ProtoLocket_ProtoRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoLocketClient) ProtoFetchAll(ctx context.Context, in *ProtoFetchAllRequest, opts ...grpc.CallOption) (*ProtoFetchAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProtoFetchAllResponse)
	err := c.cc.Invoke(ctx, ProtoLocket_ProtoFetchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoLocketServer is the server API for ProtoLocket service.
// All implementations must embed UnimplementedProtoLocketServer
// for forward compatibility.
type ProtoLocketServer interface {
	ProtoLock(context.Context, *ProtoLockRequest) (*ProtoLockResponse, error)
	ProtoFetch(context.Context, *ProtoFetchRequest) (*ProtoFetchResponse, error)
	ProtoRelease(context.Context, *ProtoReleaseRequest) (*ProtoReleaseResponse, error)
	ProtoFetchAll(context.Context, *ProtoFetchAllRequest) (*ProtoFetchAllResponse, error)
	mustEmbedUnimplementedProtoLocketServer()
}

// UnimplementedProtoLocketServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProtoLocketServer struct{}

func (UnimplementedProtoLocketServer) ProtoLock(context.Context, *ProtoLockRequest) (*ProtoLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtoLock not implemented")
}
func (UnimplementedProtoLocketServer) ProtoFetch(context.Context, *ProtoFetchRequest) (*ProtoFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtoFetch not implemented")
}
func (UnimplementedProtoLocketServer) ProtoRelease(context.Context, *ProtoReleaseRequest) (*ProtoReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtoRelease not implemented")
}
func (UnimplementedProtoLocketServer) ProtoFetchAll(context.Context, *ProtoFetchAllRequest) (*ProtoFetchAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtoFetchAll not implemented")
}
func (UnimplementedProtoLocketServer) mustEmbedUnimplementedProtoLocketServer() {}
func (UnimplementedProtoLocketServer) testEmbeddedByValue()                     {}

// UnsafeProtoLocketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoLocketServer will
// result in compilation errors.
type UnsafeProtoLocketServer interface {
	mustEmbedUnimplementedProtoLocketServer()
}

func RegisterProtoLocketServer(s grpc.ServiceRegistrar, srv ProtoLocketServer) {
	// If the following call pancis, it indicates UnimplementedProtoLocketServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProtoLocket_ServiceDesc, srv)
}

func _ProtoLocket_ProtoLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoLocketServer).ProtoLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoLocket_ProtoLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoLocketServer).ProtoLock(ctx, req.(*ProtoLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoLocket_ProtoFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoLocketServer).ProtoFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoLocket_ProtoFetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoLocketServer).ProtoFetch(ctx, req.(*ProtoFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoLocket_ProtoRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoLocketServer).ProtoRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoLocket_ProtoRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoLocketServer).ProtoRelease(ctx, req.(*ProtoReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoLocket_ProtoFetchAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoFetchAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoLocketServer).ProtoFetchAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoLocket_ProtoFetchAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoLocketServer).ProtoFetchAll(ctx, req.(*ProtoFetchAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtoLocket_ServiceDesc is the grpc.ServiceDesc for ProtoLocket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoLocket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.ProtoLocket",
	HandlerType: (*ProtoLocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProtoLock",
			Handler:    _ProtoLocket_ProtoLock_Handler,
		},
		{
			MethodName: "ProtoFetch",
			Handler:    _ProtoLocket_ProtoFetch_Handler,
		},
		{
			MethodName: "ProtoRelease",
			Handler:    _ProtoLocket_ProtoRelease_Handler,
		},
		{
			MethodName: "ProtoFetchAll",
			Handler:    _ProtoLocket_ProtoFetchAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "locket.proto",
}
